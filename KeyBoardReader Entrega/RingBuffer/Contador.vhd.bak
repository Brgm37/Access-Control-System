LIBRARY IEEE;
use IEEE.std_logic_1164.all;

entity Contador is
	port (
		Clk : in std_logic;
		Rst : in std_logic;
		Q : out std_logic_vector(3 downto 0);
		data_in: in std_logic_vector(3 downto 0);
		Count_Enable: in std_logic;
		TC: out std_logic;
		Parallel_load: in std_logic
	);
end Contador;

architecture logic of Contador is

	component FFD
		port (
			CLK : in std_logic;
			RESET : in STD_LOGIC;
			SET : in std_logic;
			D : IN STD_LOGIC;
			EN : IN STD_LOGIC;
			Q : out std_logic
		);
	END component;
	component mux
		port(
		A: in std_logic_vector(3 downto 0);
		B: in std_logic_vector(3 downto 0);
		S: in std_logic;
		M: out std_logic_vector(3 downto 0)
		);
end component;

	signal s, sD, sQ : std_logic_vector(3 downto 0);
	signal senable: std_logic;
begin

	-- Parallel Load (feito com mux):
	MuxPL : mux port map (A => data_in, B => sD, M => s, S => Parallel_load);

	-- Estado (FFs):
	FF0 : FFD port map (CLK => Clk, RESET => Rst, SET => '0', D => s(0), EN => senable, Q => sQ(0));
	FF1 : FFD port map (CLK => Clk, RESET => Rst, SET => '0', D => s(1), EN => senable, Q => sQ(1));
	FF2 : FFD port map (CLK => Clk, RESET => Rst, SET => '0', D => s(2), EN => senable, Q => sQ(2));
	FF3 : FFD port map (CLK => Clk, RESET => Rst, SET => '0', D => s(3), EN => senable, Q => sQ(3));
	
	-- Logica de estado seguinte:
	sD(0) <= not sQ(0);
	sD(1) <= sQ(0) xor sQ(1);
	sD(2) <= (sQ(0) and sQ(1)) xor sQ(2);
	sD(3) <= (sQ(0) and sQ(1) and sQ(2)) xor sQ(3);
	
	-- Logica de saida
	Q <= sQ;
	TC <= not(sQ(0) and sQ(1) and sQ(2) and sQ(3));
	senable <= Parallel_load xor Count_Enable;
end architecture;